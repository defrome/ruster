// ===== –í–ê–ñ–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–° RUST =====

// 1. –û–ë–™–Ø–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò –¢–ò–ü–û–í
fn variables_and_types() {
    // –ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    let x = 5;
    let y: i32 = 10;
    
    // –ò–∑–º–µ–Ω—è–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let mut z = 15;
    z = 20;
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const MAX_POINTS: u32 = 100_000;
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    static PROGRAM_NAME: &str = "Rust Syntax Guide";
    
    println!("x = {}, y = {}, z = {}", x, y, z);
    println!("MAX_POINTS = {}, PROGRAM_NAME = {}", MAX_POINTS, PROGRAM_NAME);
}

// 2. –û–°–ù–û–í–ù–´–ï –¢–ò–ü–´ –î–ê–ù–ù–´–•
fn data_types() {
    // –¶–µ–ª—ã–µ —á–∏—Å–ª–∞
    let a: i8 = 127;      // -128 –¥–æ 127
    let b: u8 = 255;      // 0 –¥–æ 255
    let c: i32 = 2147483647;  // 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
    let d: u64 = 18446744073709551615;  // 64-–±–∏—Ç–Ω–æ–µ –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ
    
    // –ß–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    let e: f32 = 3.14;
    let f: f64 = 3.14159265359;
    
    // –ë—É–ª–µ–≤ —Ç–∏–ø
    let g: bool = true;
    let h: bool = false;
    
    // –°–∏–º–≤–æ–ª—ã
    let i: char = 'A';
    let j: char = 'üòÄ';
    
    // –°—Ç—Ä–æ–∫–∏
    let k: &str = "Hello";  // —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Å—Ä–µ–∑
    let l: String = String::from("World");  // –≤–ª–∞–¥–µ—é—â–∞—è —Å—Ç—Ä–æ–∫–∞
    
    println!("–¶–µ–ª—ã–µ: a={}, b={}, c={}, d={}", a, b, c, d);
    println!("–ü–ª–∞–≤–∞—é—â–∏–µ: e={}, f={}", e, f);
    println!("–ë—É–ª–µ–≤—ã: g={}, h={}", g, h);
    println!("–°–∏–º–≤–æ–ª—ã: i={}, j={}", i, j);
    println!("–°—Ç—Ä–æ–∫–∏: k={}, l={}", k, l);
}

// 3. –ö–û–ú–ü–û–ó–ò–¢–ù–´–ï –¢–ò–ü–´
fn composite_types() {
    // –ö–æ—Ä—Ç–µ–∂–∏
    let tuple: (i32, f64, u8) = (500, 6.4, 1);
    let (x, y, z) = tuple;  // –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è
    println!("–ö–æ—Ä—Ç–µ–∂: x={}, y={}, z={}", x, y, z);
    println!("–î–æ—Å—Ç—É–ø –ø–æ –∏–Ω–¥–µ–∫—Å—É: tuple.0 = {}", tuple.0);
    
    // –ú–∞—Å—Å–∏–≤—ã
    let arr: [i32; 5] = [1, 2, 3, 4, 5];
    let arr_same = [3; 5];  // [3, 3, 3, 3, 3]
    println!("–ú–∞—Å—Å–∏–≤: {:?}", arr);
    println!("–ú–∞—Å—Å–∏–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏: {:?}", arr_same);
}

// 4. –§–£–ù–ö–¶–ò–ò
fn function_with_params(x: i32, y: i32) -> i32 {
    x + y  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–±–µ–∑ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π)
}

fn function_without_return(x: i32) {
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ: {}", x);
    // –Ω–µ—è–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ()
}

// 5. –£–°–õ–û–í–ù–´–ï –ö–û–ù–°–¢–†–£–ö–¶–ò–ò
fn control_flow() {
    let number = 7;
    
    // if-else
    if number < 5 {
        println!("–ß–∏—Å–ª–æ –º–µ–Ω—å—à–µ 5");
    } else if number < 10 {
        println!("–ß–∏—Å–ª–æ –º–µ–Ω—å—à–µ 10");
    } else {
        println!("–ß–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 10");
    }
    
    // if –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    let condition = true;
    let result = if condition { 5 } else { 6 };
    println!("–†–µ–∑—É–ª—å—Ç–∞—Ç: {}", result);
    
    // match (–∞–Ω–∞–ª–æ–≥ switch)
    match number {
        1 => println!("–û–¥–∏–Ω"),
        2 => println!("–î–≤–∞"),
        3..=5 => println!("–û—Ç —Ç—Ä–µ—Ö –¥–æ –ø—è—Ç–∏"),
        _ => println!("–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ"),
    }
    
    // match —Å –ø—Ä–∏–≤—è–∑–∫–æ–π
    match number {
        n @ 1..=5 => println!("–ß–∏—Å–ª–æ {} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-5", n),
        n if n % 2 == 0 => println!("–ß–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ: {}", n),
        _ => println!("–ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 5"),
    }
}

// 6. –¶–ò–ö–õ–´
fn loops() {
    // loop (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª)
    let mut count = 0;
    loop {
        count += 1;
        if count == 3 {
            break;  // –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
        }
    }
    println!("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {}", count);
    
    // while
    let mut number = 3;
    while number != 0 {
        println!("{}!", number);
        number -= 1;
    }
    
    // for
    let a = [10, 20, 30, 40, 50];
    for element in a.iter() {
        println!("–ó–Ω–∞—á–µ–Ω–∏–µ: {}", element);
    }
    
    // for —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    for number in 1..4 {
        println!("{}!", number);
    }
    
    // for —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
    for number in 1..=4 {
        println!("{}!", number);
    }
}

// 7. –í–õ–ê–î–ï–ù–ò–ï –ò –ó–ê–ò–ú–°–¢–í–û–í–ê–ù–ò–ï
fn ownership_and_borrowing() {
    // –í–ª–∞–¥–µ–Ω–∏–µ
    let s1 = String::from("hello");
    let s2 = s1;  // s1 –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ s2, s1 –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
    // println!("{}", s1);  // –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏!
    println!("{}", s2);
    
    // –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    let s3 = String::from("world");
    let s4 = s3.clone();  // s3 –æ—Å—Ç–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π
    println!("s3: {}, s4: {}", s3, s4);
    
    // –ó–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–µ (borrowing)
    let s5 = String::from("hello");
    let len = calculate_length(&s5);  // –ø–µ—Ä–µ–¥–∞—á–∞ —Å—Å—ã–ª–∫–∏
    println!("–î–ª–∏–Ω–∞ '{}' —Ä–∞–≤–Ω–∞ {}", s5, len);
    
    // –ò–∑–º–µ–Ω—è–µ–º—ã–µ —Å—Å—ã–ª–∫–∏
    let mut s6 = String::from("hello");
    change(&mut s6);
    println!("{}", s6);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
}

// 8. –°–¢–†–£–ö–¢–£–†–´
struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}

struct Color(i32, i32, i32);  // –∫–æ—Ä—Ç–µ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
struct AlwaysEqual;  // –µ–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

fn structs() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    let mut user1 = User {
        email: String::from("someone@example.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };
    
    user1.email = String::from("anotheremail@example.com");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    let user2 = User {
        email: String::from("another@example.com"),
        username: String::from("anotherusername567"),
        ..user1  // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∏–∑ user1
    };
    
    // –ö–æ—Ä—Ç–µ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    let black = Color(0, 0, 0);
    println!("–¶–≤–µ—Ç: R={}, G={}, B={}", black.0, black.1, black.2);
}

// 9. ENUM –ò PATTERN MATCHING
enum IpAddrKind {
    V4,
    V6,
}

enum IpAddr {
    V4(String),
    V6(String),
}

enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

fn enums() {
    let four = IpAddrKind::V4;
    let six = IpAddrKind::V6;
    
    let home = IpAddr::V4(String::from("127.0.0.1"));
    let loopback = IpAddr::V6(String::from("::1"));
    
    // Pattern matching —Å enum
    let msg = Message::Write(String::from("hello"));
    match msg {
        Message::Quit => println!("–í—ã—Ö–æ–¥"),
        Message::Move { x, y } => println!("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ x: {}, y: {}", x, y),
        Message::Write(text) => println!("–¢–µ–∫—Å—Ç: {}", text),
        Message::ChangeColor(r, g, b) => println!("–¶–≤–µ—Ç: R={}, G={}, B={}", r, g, b),
    }
}

// 10. –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
fn error_handling() {
    // Result
    fn divide(x: f64, y: f64) -> Result<f64, String> {
        if y == 0.0 {
            Err(String::from("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"))
        } else {
            Ok(x / y)
        }
    }
    
    match divide(10.0, 2.0) {
        Ok(result) => println!("–†–µ–∑—É–ª—å—Ç–∞—Ç: {}", result),
        Err(e) => println!("–û—à–∏–±–∫–∞: {}", e),
    }
    
    // unwrap –∏ expect
    let result = divide(10.0, 2.0).unwrap();  // –ø–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    println!("–†–µ–∑—É–ª—å—Ç–∞—Ç: {}", result);
    
    // ? –æ–ø–µ—Ä–∞—Ç–æ—Ä (—Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö Result)
    fn process_division() -> Result<f64, String> {
        let result = divide(10.0, 0.0)?;  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        Ok(result)
    }
    
    // Option
    fn find_item(items: &[i32], target: i32) -> Option<usize> {
        for (index, &item) in items.iter().enumerate() {
            if item == target {
                return Some(index);
            }
        }
        None
    }
    
    let numbers = vec![1, 2, 3, 4, 5];
    match find_item(&numbers, 3) {
        Some(index) => println!("–ù–∞–π–¥–µ–Ω–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {}", index),
        None => println!("–ù–µ –Ω–∞–π–¥–µ–Ω–æ"),
    }
}

// 11. –¢–†–ï–ô–¢–´ (TRAITS)
trait Summary {
    fn summarize(&self) -> String;
    
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    fn default_summary(&self) -> String {
        String::from("(–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ...)")
    }
}

struct NewsArticle {
    headline: String,
    location: String,
    author: String,
    content: String,
}

impl Summary for NewsArticle {
    fn summarize(&self) -> String {
        format!("{}, by {} ({})", self.headline, self.author, self.location)
    }
}

fn traits() {
    let article = NewsArticle {
        headline: String::from("–ü–∏–Ω–≥–≤–∏–Ω—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ö—É–±–æ–∫ –°—Ç—ç–Ω–ª–∏!"),
        location: String::from("–ü–∏—Ç—Ç—Å–±—É—Ä–≥, PA, USA"),
        author: String::from("Iceburgh"),
        content: String::from("–ü–∏—Ç—Ç—Å–±—É—Ä–≥—Å–∫–∏–µ –ø–∏–Ω–≥–≤–∏–Ω—ã —Å–Ω–æ–≤–∞ —è–≤–ª—è—é—Ç—Å—è –ª—É—á—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ –ù–•–õ."),
    };
    
    println!("–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è! {}", article.summarize());
    println!("{}", article.default_summary());
}

// 12. –ñ–ò–ó–ù–ï–ù–ù–´–ï –¶–ò–ö–õ–´ (LIFETIMES)
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn lifetimes() {
    let string1 = String::from("–¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞");
    let string2 = "xyz";
    
    let result = longest(string1.as_str(), string2);
    println!("–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {}", result);
}

// 13. –ó–ê–ú–´–ö–ê–ù–ò–Ø (CLOSURES)
fn closures() {
    // –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ
    let add_one = |x| x + 1;
    println!("5 + 1 = {}", add_one(5));
    
    // –ó–∞–º—ã–∫–∞–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let add = |x, y| x + y;
    println!("3 + 4 = {}", add(3, 4));
    
    // –ó–∞–º—ã–∫–∞–Ω–∏–µ —Å –∑–∞—Ö–≤–∞—Ç–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    let multiplier = 10;
    let multiply = |x| x * multiplier;
    println!("7 * {} = {}", multiplier, multiply(7));
    
    // –ó–∞–º—ã–∫–∞–Ω–∏–µ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    let expensive_closure = |num: u32| -> u32 {
        println!("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ...");
        num
    };
    
    expensive_closure(5);
}

// 14. –ò–¢–ï–†–ê–¢–û–†–´
fn iterators() {
    let v1 = vec![1, 2, 3];
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
    let v1_iter = v1.iter();
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
    for val in v1_iter {
        println!("–ü–æ–ª—É—á–∏–ª–∏: {}", val);
    }
    
    // –ú–µ—Ç–æ–¥—ã –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤
    let v2: Vec<i32> = vec![1, 2, 3];
    let v3: Vec<_> = v2.iter().map(|x| x + 1).collect();
    println!("v3: {:?}", v3);
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    let v4: Vec<i32> = vec![1, 2, 3, 4, 5];
    let v5: Vec<_> = v4.into_iter().filter(|x| x % 2 == 0).collect();
    println!("–ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞: {:?}", v5);
}

// 15. –ú–ê–ö–†–û–°–´
fn macros() {
    // println! –º–∞–∫—Ä–æ—Å
    println!("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!");
    
    // vec! –º–∞–∫—Ä–æ—Å
    let v = vec![1, 2, 3, 4, 5];
    println!("–í–µ–∫—Ç–æ—Ä: {:?}", v);
    
    // format! –º–∞–∫—Ä–æ—Å
    let s = format!("–ü—Ä–∏–≤–µ—Ç, {}!", "–º–∏—Ä");
    println!("{}", s);
    
    // assert! –º–∞–∫—Ä–æ—Å
    assert!(true, "–≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –≤—Å–µ–≥–¥–∞ –∏—Å—Ç–∏–Ω–Ω–æ");
    
    // assert_eq! –º–∞–∫—Ä–æ—Å
    assert_eq!(2 + 2, 4, "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
}

// 16. –ú–û–î–£–õ–ò –ò –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ö–û–î–ê
mod math {
    pub fn add(x: i32, y: i32) -> i32 {
        x + y
    }
    
    pub fn subtract(x: i32, y: i32) -> i32 {
        x - y
    }
    
    // –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    fn private_function() {
        println!("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–∞—è");
    }
}

fn modules() {
    use math::{add, subtract};
    
    println!("5 + 3 = {}", add(5, 3));
    println!("10 - 4 = {}", subtract(10, 4));
}

// 17. GENERICS
struct Point<T> {
    x: T,
    y: T,
}

impl<T> Point<T> {
    fn x(&self) -> &T {
        &self.x
    }
}

fn generics() {
    let integer = Point { x: 5, y: 10 };
    let float = Point { x: 1.0, y: 4.0 };
    
    println!("integer.x = {}", integer.x());
    println!("float.x = {}", float.x());
}

// 18. SMART POINTERS
use std::rc::Rc;
use std::cell::RefCell;

fn smart_pointers() {
    // Box<T> - –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—É—á–µ
    let b = Box::new(5);
    println!("b = {}", b);
    
    // Rc<T> - –ø–æ–¥—Å—á–µ—Ç —Å—Å—ã–ª–æ–∫
    let data = Rc::new(5);
    let data_clone1 = Rc::clone(&data);
    let data_clone2 = Rc::clone(&data);
    
    println!("data = {}", data);
    println!("data_clone1 = {}", data_clone1);
    println!("data_clone2 = {}", data_clone2);
    println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: {}", Rc::strong_count(&data));
    
    // RefCell<T> - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å
    let data = RefCell::new(5);
    {
        let mut borrowed = data.borrow_mut();
        *borrowed += 10;
    }
    println!("data = {}", data.borrow());
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
fn main() {
    println!("=== –í–ê–ñ–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–° RUST ===\n");
    
    variables_and_types();
    println!();
    
    data_types();
    println!();
    
    composite_types();
    println!();
    
    println!("–°—É–º–º–∞: {}", function_with_params(5, 3));
    function_without_return(10);
    println!();
    
    control_flow();
    println!();
    
    loops();
    println!();
    
    ownership_and_borrowing();
    println!();
    
    structs();
    println!();
    
    enums();
    println!();
    
    error_handling();
    println!();
    
    traits();
    println!();
    
    lifetimes();
    println!();
    
    closures();
    println!();
    
    iterators();
    println!();
    
    macros();
    println!();
    
    modules();
    println!();
    
    generics();
    println!();
    
    smart_pointers();
    println!();
    
    println!("=== –ö–û–ù–ï–¶ –û–ë–ó–û–†–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê ===");
}
